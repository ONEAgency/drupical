# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = '2'

begin
  load 'include/helper.rb'
rescue
  LoadError
end

begin

  #
  vagrant_check_requirements()

  #
  vconfig = vagrant_get_config()

  #
  aliases = vagrant_get_aliases(vconfig)

  #
  if vconfig['config']['box_dhcp'] == false && vconfig['config']['box_static_ip'].length > 0
    ip = vconfig['config']['box_static_ip']
  else
    ip = generate_random_ip()
  end

  box_hostname = vconfig['config']['box_hostname'].split('.')[0]

end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  #
  config.vagrant.host = :detect

  #
  config.vm.box = "hashicorp/precise64"
  config.vm.box_check_update = true

  #
  config.omnibus.chef_version = :latest

  # SSH config
  config.ssh.forward_agent = true
  config.ssh.insert_key = false

  # Fix NFS permission issues
  config.nfs.map_uid = Process.uid
  config.nfs.map_gid = Process.gid

  #
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :machine
    config.cache.scope = :box
    config.cache.auto_detect = false
    config.cache.synced_folder_opts = {
        type: :nfs,
        mount_options: ["rw", "vers=3", "udp", "fsc", "actimeo=1"]
    }
    config.cache.enable :apt
    config.cache.enable :apt_lists
    config.cache.enable :chef
    config.cache.enable :chef_gem
    config.cache.enable :composer
    config.cache.enable :gem
    config.cache.enable :npm
    config.cache.enable :generic, {
      'wget' => {cache_dir: '/var/cache/wget'},
      'curl' => {cache_dir: '/var/cache/curl'},
    }
  end

  #
  config.vm.network :private_network, ip: ip

  #
  config.vm.hostname = box_hostname

  #
  #config.vbguest.no_install = true

  #
  vconfig['config']['vagrant_synced_folders'].each do |key, value|
    src = File.expand_path(value.fetch('source'))
    config.vm.synced_folder src,
                            value.fetch('target'),
                            type: value.fetch('type'),
                            mount_options: value.fetch('mount_options')
  end

  # hostmanager
  if Vagrant.has_plugin?('vagrant-hostmanager')

    config.hostmanager.ip_resolver = proc do |vm|
      next ip
    end

    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true
    config.hostmanager.aliases = aliases

  end

  config.vm.provider 'virtualbox' do |vb|

    # Name
    vb.name = box_hostname

    # GUI
    vb.gui = vconfig['config']['box_gui']

    # RAM and CPU
    memory = vconfig['config']['box_ram']
    cpus = vconfig['config']['box_cpu']
    if vconfig['config']['box_ram_cpu'] == 'auto'
      host = RbConfig::CONFIG['host_os']
      if host =~ /darwin/
        cpus = `sysctl -n hw.ncpu`.to_i / 2
        memory = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
      end
    end
    vb.memory = memory
    vb.cpus = cpus

    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
    vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
    vb.customize ["modifyvm", :id, "--nictype3", "virtio"]
    vb.customize ["modifyvm", :id, "--nictype4", "virtio"]
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']

    vb.customize ['modifyvm', :id, '--ioapic', 'on']
    vb.customize ['modifyvm', :id, '--chipset', 'ich9']
    vb.customize ['modifyvm', :id, '--accelerate3d', 'off']

    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 0, '--nonrotational', 'on']

  end

  # Provisioning
  config.vm.provision :chef_solo do |chef|

    #
    chef.environment = 'vagrant'

    #
    chef.json = vconfig

    #
    if vconfig['config']['vagrant_debugging']
      chef.arguments = '-l debug -Fdoc'
      chef.log_level = :debug
    end

    #
    chef.environments_path = 'chef-repo/environments'
    chef.cookbooks_path = [
        'chef-repo/cookbooks',
        'chef-repo/site-cookbooks'
    ]

    #
    chef.roles_path = 'chef-repo/roles'

    #
    chef.add_role('base')

    #
    chef.add_role('frontend')

    #
    chef.add_role('database')

    #
    chef.add_role('web')

    #
    if vconfig['config']['php']['php_version'] == '5.3'
      chef.add_role('web-php53')
    elsif vconfig['config']['php']['php_version'] == '5.4'
      chef.add_role('web-php54')
    elsif vconfig['config']['php']['php_version'] == '5.5'
      chef.add_role('web-php55')
    end

    #
    chef.add_role('database')

    #
    if vconfig['config']['web_tools']['web_tools_install']
      chef.add_role('web-tools')
    end

    #
    if vconfig['config']['solr']['solr_install']
      chef.add_role('solr')
    end

    #
    if vconfig['config']['varnish_install']
      chef.add_role('varnish')
    end

    #
    chef.add_role('drupical')

  end

  # Restart VM
  config.vm.provision :reload

  # Set post_up_message
  config.vm.post_up_message = get_vagrant_post_up_message(aliases)

  # Try to backup the databases
  config.trigger.before :destroy do
    if File.exists?('/var/enable-backup-db')
      run_remote '/usr/local/bin/backup-db.sh'
    end
  end

end
